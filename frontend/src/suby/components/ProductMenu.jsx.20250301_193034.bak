import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { API_URL } from '../api';
import { menuData } from '../data/menuData';
import { restaurantData } from '../data/restaurants';
import { FaShoppingCart, FaPlus, FaMinus } from 'react-icons/fa';
import CustomizationModal from './CustomizationModal';
import SustainabilityBadge from './SustainabilityBadge';
import ImageWithFallback from '../../components/common/ImageWithFallback';

const ProductMenu = () => {
    const { firmId } = useParams();
    const [restaurant, setRestaurant] = useState(null);
    const [cart, setCart] = useState({});
    const [selectedCategory, setSelectedCategory] = useState('all');
    const [customizingItem, setCustomizingItem] = useState(null);
    const [loading, setLoading] = useState(true);
    
    const navigate = useNavigate();
    
    useEffect(() => {
        const fetchRestaurant = async () => {
            try {
                console.log('ProductMenu: Fetching restaurant data for ID:', firmId);
                setLoading(true);
                
                // First try local data - check if it's a numeric ID
                const isNumericId = /^\d+$/.test(firmId);
                if (isNumericId && menuData[firmId]) {
                    console.log('ProductMenu: Found numeric ID in local data');
                    setRestaurant(menuData[firmId]);
                }
                
                // Try to get data from API
                try {
                    const response = await fetch(`${API_URL}/api/restaurants/${firmId}`);
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    
                    const data = await response.json();
                    console.log('ProductMenu: API returned restaurant data:', data);
                    
                    // Only proceed if we have valid data
                    if (data && data.name) {
                        // Check if items array exists and is valid
                        if (!data.items || !Array.isArray(data.items)) {
                            console.warn('ProductMenu: No items found in API response, fetching items separately');
                            
                            // Fetch items separately
                            try {
                                const itemsResponse = await fetch(`${API_URL}/api/items/restaurant/${firmId}`);
                                if (itemsResponse.ok) {
                                    const itemsData = await itemsResponse.json();
                                    data.items = itemsData;
                                    console.log('ProductMenu: Fetched items separately:', itemsData);
                                }
                            } catch (itemsError) {
                                console.error('ProductMenu: Failed to fetch items separately:', itemsError);
                            }
                        }
                        
                        // Transform backend data to match frontend expected structure
                        const transformedData = {
                            ...data,
                            name: data.name,
                            categories: data.categories || [],
                            items: (data.items || []).map(item => ({
                                id: item._id,
                                name: item.name,
                                description: item.description || 'A delicious item prepared with care.',
                                price: item.price,
                                image: item.image || 'https://images.unsplash.com/photo-1546069901-ba9599a7e63c?q=80&w=2080',
                                category: item.category || 'Other'
                            }))
                        };
                        
                        console.log('ProductMenu: Transformed restaurant data:', transformedData);
                        setRestaurant(transformedData);
                    }
                } catch (apiError) {
                    console.error("ProductMenu: Failed to fetch from API:", apiError);
                    
                    // If we don't have local data yet, try to find a matching restaurant by name
                    if (!restaurant) {
                        console.log("ProductMenu: Trying to find restaurant in local data by MongoDB ID");
                        
                        // Look through all vendors to find matching MongoDB ID
                        const foundVendor = restaurantData.vendors.find(vendor => 
                            vendor._id === firmId || 
                            vendor.firm.some(firm => firm._id === firmId)
                        );
                        
                        if (foundVendor) {
                            const numericId = foundVendor._id;
                            console.log(`ProductMenu: Found matching restaurant with numeric ID: ${numericId}`);
                            
                            if (menuData[numericId]) {
                                setRestaurant(menuData[numericId]);
                            }
                        } else {
                            console.log("ProductMenu: Could not find restaurant in local data by MongoDB ID");
                        }
                    }
                }
            } catch (error) {
                console.error("ProductMenu: Critical error:", error);
            } finally {
                setLoading(false);
            }
        };

        fetchRestaurant();
    }, [firmId]);

    if (!restaurant) {
        return <div>Restaurant not found</div>;
    }

    const addToCart = (item, customizations = null) => {
        const cartItemId = customizations 
            ? `${item.id}_${JSON.stringify(customizations)}`
            : item.id;
            
        setCart(prev => ({
            ...prev,
            [cartItemId]: {
                ...prev[cartItemId],
                quantity: (prev[cartItemId]?.quantity || 0) + 1,
                item,
                customizations
            }
        }));
    };

    const removeFromCart = (cartItemId) => {
        setCart(prev => {
            const newCart = { ...prev };
            if (newCart[cartItemId].quantity > 1) {
                newCart[cartItemId].quantity--;
            } else {
                delete newCart[cartItemId];
            }
            return newCart;
        });
    };

    const getCartTotal = () => {
        return Object.values(cart).reduce((total, { quantity, item }) => {
            return total + (item.price * quantity);
        }, 0);
    };

    const handleCustomizationSave = (customizations) => {
        addToCart(customizingItem, customizations);
        setCustomizingItem(null);
    };

    return (
        <div className="menuContainer">
            <div className="menuHeader">
                <div>
                    <h2>{restaurant?.name}</h2>
                    {restaurant?.sustainabilityMetrics && (
                        <SustainabilityBadge metrics={restaurant.sustainabilityMetrics} />
                    )}
                </div>
                <div className="cartIcon">
                    <FaShoppingCart />
                    <span className="cartCount">
                        {Object.values(cart).reduce((a, { quantity }) => a + quantity, 0)}
                    </span>
                </div>
            </div>

            <div className="categoryFilter">
                <button 
                    className={selectedCategory === 'all' ? 'active' : ''} 
                    onClick={() => setSelectedCategory('all')}
                >
                    All
                </button>
                {(restaurant?.categories || []).map(cat => (
                    <button
                        key={cat}
                        className={selectedCategory === cat ? 'active' : ''}
                        onClick={() => setSelectedCategory(cat)}
                    >
                        {cat}
                    </button>
                ))}
            </div>

            <div className="menuGrid">
                {(restaurant?.items || [])
                    .filter(item => selectedCategory === 'all' || item.category === selectedCategory)
                    .map(item => (
                        <div key={`menu-item-${item.id}`} className="menuItem">
                            <ImageWithFallback 
                                src={item.image}
                                alt={item.name}
                                fallbackType="food"
                            />
                            <div className="itemDetails">
                                <h3>{item.name}</h3>
                                <p>{item.description}</p>
                                <div className="itemPrice">â‚¹{item.price}</div>
                                <div className="itemActions">
                                    {Object.entries(cart)
                                        .filter(([_, { item: cartItem }]) => cartItem.id === item.id)
                                        .map(([cartItemId, { quantity, customizations }], index) => (
                                            <div key={`cart-item-${cartItemId}`} className="quantityControl">
                                                <button onClick={() => removeFromCart(cartItemId)}>
                                                    <FaMinus />
                                                </button>
                                                <span>{quantity}</span>
                                                <button onClick={() => addToCart(item, customizations)}>
                                                    <FaPlus />
                                                </button>
                                                {customizations && <span className="customized-badge">Customized</span>}
                                            </div>
                                        ))}
                                    {!Object.values(cart).some(({ item: cartItem }) => cartItem.id === item.id) && (
                                        <button 
                                            className="addToCart"
                                            onClick={() => setCustomizingItem(item)}
                                        >
                                            Customize & Add
                                        </button>
                                    )}
                                </div>
                            </div>
                        </div>
                    ))}
            </div>

            {customizingItem && (
                <CustomizationModal 
                    item={customizingItem}
                    onClose={() => setCustomizingItem(null)}
                    onSave={handleCustomizationSave}
                />
            )}

            {Object.keys(cart).length > 0 && (
                <div className="cartSummary">
                    <div className="cartTotal">
                        <span>Total: â‚¹{getCartTotal()}</span>
                        <button 
                            className="checkoutBtn" 
                            onClick={() => navigate('/order-tracking')}
                        >
                            Proceed to Checkout
                        </button>
                    </div>
                </div>
            )}
        </div>
    );
};

export default ProductMenu;
